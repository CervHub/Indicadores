<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use App\Models\Vehicle;
use App\Models\Module;
use Illuminate\Http\Request;
use App\Models\User;
use Carbon\Carbon;
use Illuminate\Support\Facades\Log;

class WebController extends Controller
{
    /**
     * Guarda el reporte según el tipo especificado
     *
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function saveReport(Request $request)
    {
        Log::info('Guardando reporte', [
            'request' => $request->all(),
        ]);
        try {
            if ($request->input('type_report') === 'vehicular') {
                $inspectionType = $request->input('type_inspection');
                if (in_array($inspectionType, ['Trimestral', 'Semestral', 'Anual'])) {
                    $this->createVehicleInspection($request);
                    return response()->json(['status' => 'success', 'message' => "Reporte $inspectionType guardado correctamente"], 200);
                }

                $this->createVehiclePreUse($request);
                return response()->json(['status' => 'success', 'message' => 'Reporte de preuso guardado correctamente'], 200);
            }

            return response()->json(['status' => 'error', 'message' => 'Tipo de reporte inválido'], 400);
        } catch (\Exception $e) {
            return response()->json(['status' => 'error', 'message' => 'Ocurrió un error: ' . $e->getMessage()], 500);
        }
    }

    /**
     * Crea un reporte de preuso vehicular
     *
     * @param Request $request
     * @throws \Exception
     */
    private function createVehiclePreUse(Request $request)
    {
        try {
            $data = $request->only([
                'userId',
                'companyId',
                'plate',
                'vehicleCode',
                'department',
                'date',
                'shift',
                'driver',
                'mileage',
                'recordNumber',
                'images',
                'signature',
                'observations',
                'causas',
                'type_report',
                'type_inspection'
            ]);

            $data['date'] = Carbon::parse($data['date'])->format('Y-m-d');
            $data['companyId'] = $data['companyId'] ?? 1;

            $details = collect($data)->only([
                'plate',
                'vehicleCode',
                'department',
                'shift',
                'driver',
                'mileage',
                'recordNumber',
                'observations',
                'causas'
            ])->toArray();

            $details['causas'] = is_array($details['causas']) ? json_encode($details['causas']) : $details['causas'];

            Module::create([
                'fecha_reporte' => $data['date'],
                'fecha_evento' => Carbon::now()->format('Y-m-d H:i:s'),
                'firma' => $data['signature'],
                'images' => is_array($data['images']) ? json_encode($data['images']) : $data['images'],
                'tipo_reporte' => $data['type_report'] ?? 'unknown',
                'user_id' => $data['userId'],
                'company_id' => $data['companyId'],
                'details' => json_encode($details),
                'device' => 'unknown',
                'version' => '2.0.0',
                'tipo_inspeccion' => $data['type_inspection'],
                'estado' => 'Generado',
            ]);
        } catch (\Exception $e) {
            throw new \Exception('Error al crear el reporte de preuso vehicular: ' . $e->getMessage());
        }
    }

    /**
     * Crea un reporte de inspección vehicular (Trimestral, Semestral, Anual)
     *
     * @param Request $request
     * @throws \Exception
     */
    private function createVehicleInspection(Request $request)
    {
        try {
            $data = $request->only([
                'userId',
                'companyId',
                'plate',
                'type',
                'brand',
                'model',
                'engineNumber',
                'year',
                'company',
                'driver',
                'licenseNumber',
                'generalState',
                'autoGeneratedCode',
                'images',
                'signature',
                'result',
                'inspectionDate',
                'type_report',
                'type_inspection',
                'causas'
            ]);

            $data['inspectionDate'] = Carbon::parse($data['inspectionDate'])->format('Y-m-d H:i:s');
            $data['companyId'] = $data['companyId'] ?? 1;

            $details = collect($data)->only([
                'plate',
                'type',
                'brand',
                'model',
                'engineNumber',
                'year',
                'company',
                'driver',
                'licenseNumber',
                'generalState',
                'autoGeneratedCode',
                'result',
                'causas'
            ])->toArray();

            Module::create([
                'fecha_reporte' => $data['inspectionDate'],
                'fecha_evento' => Carbon::now()->format('Y-m-d H:i:s'),
                'firma' => $data['signature'],
                'images' => is_array($data['images']) ? json_encode($data['images']) : $data['images'],
                'tipo_reporte' => $data['type_report'] ?? 'unknown',
                'user_id' => $data['userId'],
                'company_id' => $data['companyId'],
                'details' => json_encode($details),
                'device' => 'unknown',
                'version' => '2.0.0',
                'tipo_inspeccion' => $data['type_inspection'],
                'estado' => 'Generado',
            ]);
        } catch (\Exception $e) {
            throw new \Exception('Error al crear el reporte de inspección vehicular: ' . $e->getMessage());
        }
    }

    /**
     * Retorna información del vehículo según placa
     *
     * @param Request $request
     * @return \Illuminate\Http\JsonResponse
     */
    public function getVehicles(Request $request)
    {
        $request->validate(['plate' => 'required|string']);

        $vehicle = Vehicle::where('license_plate', $request->input('plate'))->first();

        return $vehicle
            ? response()->json(['status' => 'success', 'data' => $vehicle], 200)
            : response()->json(['status' => 'error', 'message' => 'Vehículo no encontrado'], 404);
    }

    public function getUsers(Request $request)
    {
        $request->validate(['licenseNumber' => 'required|string']);

        $user = User::where('doi', $request->input('licenseNumber'))->first();

        if ($user) {
            $data = [
                'nombres' => $user->nombres,
                'apellidos' => $user->apellidos,
                'cargo' => $user->cargo,
                'empresa' => $user->company->nombre ?? 'Sin empresa', // Asegúrate de que la relación `company` esté definida en el modelo User
            ];

            return response()->json(['status' => 'success', 'data' => $data], 200);
        }

        return response()->json(['status' => 'error', 'message' => 'Usuario no encontrado'], 404);
    }
}
