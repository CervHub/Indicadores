import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { useForm } from '@inertiajs/react'; // Importamos useForm para manejar el envío de datos
import { Search } from 'lucide-react';
import React, { useState } from 'react';
import { toast } from 'sonner';
import ImageDropZone from './image';

type Causa = { id: string; name: string; group: string };

const vehicleTypes = {
    camioneta: 'Camioneta',
    combi: 'Combi',
    ambulancia: 'Ambulancia',
    bus: 'Bus',
    camión: 'Camión',
    'camión grúa': 'Camión grúa',
    otros: 'Otros',
};

export default function InspectionVehicle({
    causas,
    type,
    userId,
    companyId,
    userName,
    company,
}: {
    causas: Causa[];
    type: string;
    userId: string;
    companyId: string;
    userName: string;
    company: string;
}) {
    const { data, setData, post, reset } = useForm({
        plate: '',
        type: '',
        brand: '',
        model: '',
        engineNumber: '',
        year: '',
        company: company,
        driver: '',
        licenseNumber: '',
        generalState: '',
        autoGeneratedCode: '',
        images: [] as string[],
        signature: '',
        result: '',
        inspectionDate: '',
        companyId, // Agregar companyId al formulario
        userId, // Agregar userId al formulario
        userName, // Agregar userName al formulario
        type_report: 'vehicular', // Agregar tipo de reporte
        type_inspection: type, // Agregar tipo de inspección
    });

    const [causaStates, setCausaStates] = useState(causas.map((causa) => ({ id: causa.id, state: '', observation: '' })));
    const [isSearchingPlate, setIsSearchingPlate] = useState(false);
    const [isSearchingLicense, setIsSearchingLicense] = useState(false);
    const [isSubmitting, setIsSubmitting] = useState(false); // Estado para el preload del botón

    const isFormValid = () => {
        return (
            data.plate &&
            data.type &&
            data.brand &&
            data.model &&
            data.engineNumber &&
            data.year &&
            data.company &&
            data.driver &&
            data.licenseNumber &&
            data.generalState &&
            data.result &&
            data.inspectionDate
        );
    };

    const handleCausaStateChange = (id: string, state: string, observation: string) => {
        setCausaStates((prev) => prev.map((causa) => (causa.id === id ? { ...causa, state, observation } : causa)));
    };

    const handleSearchPlate = () => {
        if (!data.plate) {
            toast.error('Por favor, ingrese una placa para buscar.');
            return;
        }

        setIsSearchingPlate(true); // Activar el estado de búsqueda
        toast.info('Buscando información para la placa...', { duration: 3000 }); // Mostrar toast

        fetch(route('web.v1.searchVehicles', { plate: data.plate }))
            .then((response) => {
                if (!response.ok) {
                    throw new Error('Error al buscar la placa.');
                }
                return response.json();
            })
            .then((response) => {
                const vehicleData = response.data;
                if (vehicleData) {
                    setData('brand', vehicleData.brand || '');
                    setData('engineNumber', vehicleData.enginenumber || '');
                    setData('autoGeneratedCode', vehicleData.code || '');
                    setData('year', vehicleData.year || '');
                    setData('model', vehicleData.model || '');
                    setData('type', vehicleData.type || '');
                    toast.success('Información del vehículo cargada con éxito.');
                } else {
                    toast.error('No se encontró información para la placa ingresada.');
                }
            })
            .catch((error) => {
                console.error(error);
                toast.error('Ocurrió un error al buscar la placa.');
            })
            .finally(() => {
                setIsSearchingPlate(false); // Desactivar el estado de búsqueda
            });
    };

    const handleSearchLicense = () => {
        if (!data.licenseNumber) {
            toast.error('Por favor, ingrese un número de licencia para buscar.');
            return;
        }

        setIsSearchingLicense(true); // Activar el estado de búsqueda
        toast.info('Buscando información para el número de licencia...', { duration: 3000 }); // Mostrar toast

        fetch(route('web.v1.searchUsers', { licenseNumber: data.licenseNumber }))
            .then((response) => {
                if (!response.ok) {
                    throw new Error('Error al buscar el número de licencia.');
                }
                return response.json();
            })
            .then((response) => {
                const userData = response.data;
                if (userData) {
                    setData('driver', `${userData.nombres} ${userData.apellidos}`);
                    setData('company', userData.company || '');
                    toast.success('Información del usuario cargada con éxito.');
                } else {
                    toast.error('No se encontró información para el número de licencia ingresado.');
                }
            })
            .catch((error) => {
                console.error(error);
                toast.error('Ocurrió un error al buscar el número de licencia.');
            })
            .finally(() => {
                setIsSearchingLicense(false); // Desactivar el estado de búsqueda
            });
    };

    const handleSubmit = (e: React.FormEvent) => {
        e.preventDefault();
        if (!isFormValid()) {
            toast.error('Por favor, complete todos los campos requeridos antes de enviar el formulario.');
            return;
        }

        setIsSubmitting(true); // Activar el preload del botón

        post(route('web.v1.saveReport'), {
            onSuccess: (page) => {
                const flash = page.props.flash as { success?: string; error?: string };
                if (flash.success) {
                    toast.success(flash.success);
                    reset(); // Resetear el formulario
                    setCausaStates(causas.map((causa) => ({ id: causa.id, state: '', observation: '' }))); // Resetear las causas
                } else if (flash.error) {
                    toast.error(flash.error);
                }
            },
            onError: () => {
                toast.error('Ocurrió un error al enviar el formulario. Intente de nuevo.');
            },
            onFinish: () => {
                setIsSubmitting(false); // Desactivar el preload del botón
            },
        });
    };

    const groupedCausas = causas.reduce(
        (groups, causa) => {
            if (!groups[causa.group]) {
                groups[causa.group] = [];
            }
            groups[causa.group].push(causa);
            return groups;
        },
        {} as Record<string, Causa[]>,
    );

    return (
        <form className="grid grid-cols-2 gap-6 lg:grid-cols-4" onSubmit={handleSubmit}>
            {/* Empresa */}
            <div>
                <Label htmlFor="company" className="mb-3">
                    Empresa
                </Label>
                <Input type="text" id="company" value={data.company || ''} onChange={(e) => setData('company', e.target.value)} />
            </div>

            {/* Tipo */}
            <div>
                <Label htmlFor="type" className="mb-3">
                    Tipo
                </Label>
                <Select onValueChange={(value) => setData('type', value)} value={data.type}>
                    <SelectTrigger className="w-full">
                        <SelectValue placeholder="Seleccione un tipo" />
                    </SelectTrigger>
                    <SelectContent>
                        {Object.entries(vehicleTypes).map(([key, label]) => (
                            <SelectItem key={key} value={key}>
                                {label}
                            </SelectItem>
                        ))}
                    </SelectContent>
                </Select>
            </div>

            {/* Marca */}
            <div>
                <Label htmlFor="brand" className="mb-3">
                    Marca
                </Label>
                <Input type="text" id="brand" value={data.brand || ''} onChange={(e) => setData('brand', e.target.value)} />
            </div>

            {/* Modelo */}
            <div>
                <Label htmlFor="model" className="mb-3">
                    Modelo
                </Label>
                <Input type="text" id="model" value={data.model || ''} onChange={(e) => setData('model', e.target.value)} />
            </div>

            {/* Nº Motor */}
            <div>
                <Label htmlFor="engineNumber" className="mb-3">
                    Nº Motor
                </Label>
                <Input type="text" id="engineNumber" value={data.engineNumber || ''} onChange={(e) => setData('engineNumber', e.target.value)} />
            </div>

            {/* Año */}
            <div>
                <Label htmlFor="year" className="mb-3">
                    Año
                </Label>
                <Input type="text" id="year" value={data.year || ''} onChange={(e) => setData('year', e.target.value)} />
            </div>

            {/* Placa */}
            <div>
                <Label htmlFor="plate" className="mb-3">
                    Placa
                </Label>
                <div className="relative flex items-center gap-2">
                    <Input type="text" id="plate" value={data.plate || ''} onChange={(e) => setData('plate', e.target.value)} className="flex-1" />
                    <Button
                        variant={'outline'}
                        type="button"
                        onClick={handleSearchPlate}
                        className="flex items-center px-2"
                        disabled={isSearchingPlate}
                    >
                        {isSearchingPlate ? (
                            <span className="loader h-5 w-5 animate-spin rounded-full border-2 border-gray-500 border-t-transparent"></span>
                        ) : (
                            <Search className="h-5 w-5 text-gray-500" />
                        )}
                    </Button>
                </div>
            </div>

            {/* Conductor */}
            <div>
                <Label htmlFor="driver" className="mb-3">
                    Conductor
                </Label>
                <Input type="text" id="driver" value={data.driver || ''} onChange={(e) => setData('driver', e.target.value)} />
            </div>

            {/* Nº Licencia */}
            <div className="flex items-end gap-2">
                <div className="flex-1">
                    <Label htmlFor="licenseNumber" className="mb-3">
                        Nº Licencia
                    </Label>
                    <div className="relative flex items-center gap-2">
                        <Input
                            type="text"
                            id="licenseNumber"
                            value={data.licenseNumber || ''}
                            onChange={(e) => setData('licenseNumber', e.target.value)}
                            className="flex-1"
                        />
                        <Button
                            variant={'outline'}
                            type="button"
                            onClick={handleSearchLicense}
                            className="flex items-center px-2"
                            disabled={isSearchingLicense}
                        >
                            {isSearchingLicense ? (
                                <span className="loader h-5 w-5 animate-spin rounded-full border-2 border-gray-500 border-t-transparent"></span>
                            ) : (
                                <Search className="h-5 w-5 text-gray-500" />
                            )}
                        </Button>
                    </div>
                </div>
            </div>

            {/* Estado General del Vehículo */}
            <div>
                <Label htmlFor="generalState" className="mb-3">
                    Estado General del Vehículo
                </Label>
                <Input type="text" id="generalState" value={data.generalState || ''} onChange={(e) => setData('generalState', e.target.value)} />
            </div>

            {/* Código Autogenerado */}
            <div>
                <Label htmlFor="autoGeneratedCode" className="mb-3">
                    Código Autogenerado
                </Label>
                <Input type="text" id="autoGeneratedCode" value={data.autoGeneratedCode || ''} disabled />
            </div>

            {/* Tabla de causas */}
            <div className="col-span-4">
                <h3 className="mb-4 text-lg font-bold">Causas</h3>
                <div className="bg-background overflow-hidden rounded-md border">
                    <Table>
                        <TableHeader>
                            <TableRow className="bg-muted/50 border-b">
                                <TableHead className="h-8 border-r py-2" rowSpan={2} style={{ width: '50%' }}>
                                    Item
                                </TableHead>
                                <TableHead className="h-8 border-r py-2" colSpan={3}>
                                    Estado
                                </TableHead>
                                <TableHead className="h-8 border-l py-2" rowSpan={2} style={{ width: '20%' }}>
                                    Observaciones
                                </TableHead>
                            </TableRow>
                            <TableRow className="bg-muted/50 border-b">
                                <TableHead className="h-8 border-r py-2" style={{ width: '10%' }}>
                                    Bien
                                </TableHead>
                                <TableHead className="h-8 border-r py-2" style={{ width: '10%' }}>
                                    Mal
                                </TableHead>
                                <TableHead className="h-8 py-2" style={{ width: '10%' }}>
                                    No Aplica
                                </TableHead>
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            {Object.entries(groupedCausas).map(([group, groupCausas]) => (
                                <React.Fragment key={group}>
                                    <TableRow className="bg-muted/50">
                                        <TableCell colSpan={5} className="text-center font-bold">
                                            {group}
                                        </TableCell>
                                    </TableRow>
                                    {groupCausas.map((causa) => (
                                        <TableRow key={causa.id}>
                                            <TableCell className="border-r py-1 font-medium">{causa.name}</TableCell>
                                            <TableCell className="text-center">
                                                <input
                                                    type="radio"
                                                    name={`estado-${causa.id}`}
                                                    value="Bien"
                                                    checked={causaStates.find((c) => c.id === causa.id)?.state === 'Bien'}
                                                    onChange={() => handleCausaStateChange(causa.id, 'Bien', '')}
                                                />
                                            </TableCell>
                                            <TableCell className="border-r border-l text-center">
                                                <input
                                                    type="radio"
                                                    name={`estado-${causa.id}`}
                                                    value="Mal"
                                                    checked={causaStates.find((c) => c.id === causa.id)?.state === 'Mal'}
                                                    onChange={() => handleCausaStateChange(causa.id, 'Mal', '')}
                                                />
                                            </TableCell>
                                            <TableCell className="text-center">
                                                <input
                                                    type="radio"
                                                    name={`estado-${causa.id}`}
                                                    value="No Aplica"
                                                    checked={causaStates.find((c) => c.id === causa.id)?.state === 'No Aplica'}
                                                    onChange={() => handleCausaStateChange(causa.id, 'No Aplica', '')}
                                                />
                                            </TableCell>
                                            <TableCell>
                                                <Input
                                                    type="text"
                                                    value={causaStates.find((c) => c.id === causa.id)?.observation || ''}
                                                    onChange={(e) => handleCausaStateChange(causa.id, '', e.target.value)}
                                                />
                                            </TableCell>
                                        </TableRow>
                                    ))}
                                </React.Fragment>
                            ))}
                        </TableBody>
                    </Table>
                </div>
            </div>

            {/* Imágenes adicionales */}
            <div className="col-span-4">
                <ImageDropZone
                    images={data.images}
                    onUpload={(files) => {
                        files.forEach((file) => {
                            const reader = new FileReader();
                            reader.onload = () => {
                                const base64Image = reader.result as string;
                                setData('images', [...data.images, base64Image].slice(0, 4));
                            };
                            reader.readAsDataURL(file);
                        });
                    }}
                    onRemove={(index) => {
                        const updatedImages = data.images.filter((_, i) => i !== index);
                        setData('images', updatedImages);
                    }}
                    label="Imágenes adicionales"
                />
            </div>

            {/* Firma */}
            <div className="col-span-4">
                <ImageDropZone
                    images={data.signature ? [data.signature] : []}
                    maxImages={1}
                    onUpload={(files) => {
                        const reader = new FileReader();
                        reader.onload = () => {
                            const base64Signature = reader.result as string;
                            setData('signature', base64Signature);
                        };
                        reader.readAsDataURL(files[0]);
                    }}
                    onRemove={() => setData('signature', '')}
                    label="Firma"
                />
            </div>

            {/* Aprobado/Desaprobado */}
            <div>
                <Label htmlFor="result" className="mb-3">
                    Resultado
                </Label>
                <Select onValueChange={(value) => setData('result', value)} value={data.result}>
                    <SelectTrigger className="w-full">
                        <SelectValue placeholder="Seleccione el resultado" />
                    </SelectTrigger>
                    <SelectContent>
                        <SelectItem value="Aprobado">Aprobado</SelectItem>
                        <SelectItem value="Desaprobado">Desaprobado</SelectItem>
                    </SelectContent>
                </Select>
            </div>

            {/* Inspeccionado por */}
            <div>
                <Label htmlFor="inspectedBy" className="mb-3">
                    Inspeccionado por
                </Label>
                <Input type="text" id="inspectedBy" value={userName} disabled />
            </div>

            {/* Fecha Inspección */}
            <div>
                <Label htmlFor="inspectionDate" className="mb-3">
                    Fecha y Hora de Inspección
                </Label>
                <Input
                    type="datetime-local"
                    id="inspectionDate"
                    value={data.inspectionDate || ''}
                    onChange={(e) => setData('inspectionDate', e.target.value)}
                />
            </div>

            {/* Botón de envío */}
            <div className="col-span-4 flex items-center justify-start gap-4">
                <Button type="submit" className="flex items-center" disabled={!isFormValid() || isSubmitting}>
                    {isSubmitting ? (
                        <>
                            <span className="loader mr-2 h-5 w-5 animate-spin rounded-full border-2 border-gray-500 border-t-transparent"></span>
                            Generando reporte...
                        </>
                    ) : (
                        'Generar reporte'
                    )}
                </Button>
            </div>
        </form>
    );
}
